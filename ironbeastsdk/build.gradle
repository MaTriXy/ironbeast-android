apply plugin: 'com.android.library'


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        def BOOLEAN = "boolean"
        def TRUE = "true"
        def FALSE = "false"
        def STRING = "String"

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'mobileCore.pro'
            buildConfigField(STRING, "DEFAULT_URL", '"http://lb.ironbeast.io"')
            buildConfigField(STRING, "BULK_URL", '"http://lb.ironbeast.io/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", FALSE)
        }

        debug {
            //mcDiscovery http://lb.ironbeast.io/bulk
            buildConfigField(STRING, "DEFAULT_URL", '"http://IronBeastELB-Staging-920640948.us-east-1.elb.amazonaws.com"')
            buildConfigField(STRING, "BULK_URL", '"http://IronBeastELB-Staging-920640948.us-east-1.elb.amazonaws.com/bulk"')
            buildConfigField(BOOLEAN, "IS_SUPER_DEV_MODE", TRUE)
        }

    }
    //release type by default so for test we need to set debug
    defaultPublishConfig "debug"
    // important shit for sdk module use
    // If you wanted to change the default published variant while using flavors, you would write:
    //defaultPublishConfig "devRelease"
    //Publishing of all variants are not enabled by default. To enable them:
    //publishNonDefault true

    sourceSets {
        main {
            resources.srcDirs = ["src/main/java"]
        }
        test {
            resources {
                srcDir "test"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    // Configure tests
    testOptions {
        unitTests.returnDefaultValues = true
    }
}
dependencies {
    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    // Set this dependency if you want to use Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'
    // JSONObject should be available in tests too
    testCompile 'org.json:json:20090211'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}

task deleteJavaDebugLogs << {
    description("This function will delete all SDK DEBUG log level from the project, be careful with it!")
    FileTree javaFiles = fileTree('src/main/java/io/ironbeast/sdk') {
        include '**/*.java'
    }
    String regex = "Logger.log[^,]+[^L]+(.*)Logger.SDK_DEBUG[^;];"
    javaFiles.each { File javaFile ->
        println "Start replacing regex on $javaFile.name"
        String content = javaFile.getText()
        content = content.replaceAll(regex, "")
        javaFile.setText(content)
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equalsIgnoreCase("debug")) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        exclude '**/internal/**'
        failOnError false
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

